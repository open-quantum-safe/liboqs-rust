searchState.loadedDescShard("oqs_sys", 0, "Bindings to liboqs\nCPU runtime detection flags\nChecks if the CPU supports a given extension\nUsed to indicate that some undefined error occurred.\nUsed to indicate failures in external libraries (e.g., …\nInternal implementation of C11 aligned_alloc to work …\nFree memory allocated with OQS_MEM_aligned_alloc.\nAllocates memory for an array of elements of a given size. …\nZeros out <code>len</code> bytes of memory starting at <code>ptr</code>.\nFrees <code>ptr</code>.\nAllocates memory of a given size. @param size The size of …\nConstant time comparison of byte sequences <code>a</code> and <code>b</code> of …\nZeros out <code>len</code> bytes of memory starting at <code>ptr</code>, then frees …\nDuplicates a string. @param str The string to be …\nRepresents return values from functions.\nUsed to indicate successful return from function.\nThis function frees prefetched OpenSSL objects\nThis currently sets the values in the OQS_CPU_EXTENSIONS …\nThis function stops OpenSSL threads, which allows resources\nReturn library version string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey encapsulation mechanism object\nReturns the number of key encapsulation mechanisms in …\nReturns identifiers for available key encapsulation …\nIndicates whether the specified algorithm was enabled at …\nDecapsulation algorithm.\nEncapsulation algorithm.\nFrees an OQS_KEM object that was constructed by …\nKeypair generation algorithm.\nDerandomized keypair generation algorithm.\nConstructs an OQS_KEM object for a particular algorithm.\nPrintable string representing the version of the …\nThe NIST security level (1, 2, 3, 4, 5) claimed in this …\nDecapsulation algorithm.\nEncapsulation algorithm.\nReturns the argument unchanged.\nWhether the KEM offers IND-CCA security (TRUE) or IND-CPA …\nCalls <code>U::from(self)</code>.\nKeypair generation algorithm.\nDerandomized keypair generation algorithm.\nThe length, in bytes, of ciphertexts for this KEM.\nThe length, in bytes, of seeds for derandomized keypair …\nThe length, in bytes, of public keys for this KEM.\nThe length, in bytes, of secret keys for this KEM.\nThe length, in bytes, of shared secrets for this KEM.\nPrintable string representing the name of the key …\nFills the given memory with the requested number of …\nSwitches OQS_randombytes to use the given function.\nSwitches OQS_randombytes to use the specified algorithm.\nSignature schemes object\nReturns the number of signature mechanisms in liboqs.  …\nReturns identifiers for available signature schemes in …\nIndicates whether the specified algorithm was enabled at …\nFrees an OQS_SIG object that was constructed by …\nKeypair generation algorithm.\nConstructs an OQS_SIG object for a particular algorithm.\nSignature generation algorithm.\nSignature generation algorithm, with custom context string.\nSignature verification algorithm.\nSignature verification algorithm, with custom context …\nPrintable string representing the version of the …\nThe NIST security level (1, 2, 3, 4, 5) claimed in this …\nWhether the signature offers EUF-CMA security (TRUE) or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKeypair generation algorithm.\nThe length, in bytes, of public keys for this signature …\nThe length, in bytes, of secret keys for this signature …\nThe (maximum) length, in bytes, of signatures for this …\nPrintable string representing the name of the signature …\nWhether the signature supports signing with a context …\nSignature generation algorithm.\nSignature generation algorithm, with custom context string.\nWhether the signature offers SUF-CMA security (TRUE) or …\nSignature verification algorithm.\nSignature verification algorithm, with custom context …")