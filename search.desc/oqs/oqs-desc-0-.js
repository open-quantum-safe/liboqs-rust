searchState.loadedDescShard("oqs", 0, "Friendly bindings to liboqs\nIndicates an algorithm has been disabled\nContains the error value\nPossible errors\nGeneric error\nError occurred in OpenSSL functions external to liboqs\nInvalid length of a public object\nContains the success value\nResult type for operations that may fail\nAccess the OQS ffi through this crate.\nReturns the argument unchanged.\nInitialize liboqs\nCalls <code>U::from(self)</code>.\nKEM API\nImplements a buffer for cryptographic objects\nSignature API\nSupported algorithms by OQS\nNew owned buffer\nReference version of this type.\nKEM algorithm\nNew owned buffer\nReference version of this type.\nNew owned buffer\nReference version of this type.\nNew owned buffer\nReference version of this type.\nNew owned buffer\nReference version of this type.\nGet the algorithm used by this <code>Kem</code>\nObtain a ciphertext from bytes\nGet the claimed nist level\nDecapsulate the provided ciphertext\nEncapsulate to the provided public key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the contained vector\nObtain the contained vector\nObtain the contained vector\nObtain the contained vector\nObtain the contained vector\nReturns true if this algorithm is enabled in the linked …\nIs the algorithm ind_cca secure\nGenerate a new keypair\nGenerate a new keypair from a seed\nObtain a keypair seed from bytes\nLength in bytes\nLength in bytes\nLength in bytes\nLength in bytes\nLength in bytes\nGet the length of the ciphertext\nGet the length of a keypair seed\nGet the length of the public key\nGet the length of the secret key\nGet the length of a shared secret\nReturns the algorithm’s name as a static Rust string.\nConstruct a new algorithm\nObtain a public key from bytes\nObtain a secret key objects from bytes\nObtain a secret key from bytes\nProvides a pointer to the id of the algorithm\nClone this into the owned variant\nClone this into the owned variant\nClone this into the owned variant\nClone this into the owned variant\nClone this into the owned variant\nGet the version of the implementation\nSupported algorithms by liboqs\nContext string type\nMessage type\nNew owned buffer\nReference version of this type.\nNew owned buffer\nReference version of this type.\nSignature scheme\nNew owned buffer\nReference version of this type.\nGet the algorithm used by this <code>Sig</code>\nObtain the claimed nist level\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDoes this algorithm support signing with a context string?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the contained vector\nObtain the contained vector\nObtain the contained vector\nReturns true if this algorithm is enabled in the linked …\nIs this algorithm EUF-CMA?\nGenerate a new keypair\nLength in bytes\nLength in bytes\nLength in bytes\nLength of the public key\nLength of the secret key\nMaximum length of a signature\nReturns the algorithm’s name as a static Rust string.\nConstruct a new algorithm\nConstruct a public key object from bytes\nConstruct a secret key object from bytes\nSign a message\nSign a message with a context string\nConstruct a signature object from bytes\nProvides a pointer to the id of the algorithm\nClone this into the owned variant\nClone this into the owned variant\nClone this into the owned variant\nVerify a message\nVerify a message with a context string\nGet the version of the implementation")